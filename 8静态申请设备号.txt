前面是用的是杂项设备主设备号已经固定（10）；
字符类设备需要自己申请；

字符设备函数在文件“include/linux/fs.h”中
内核提供了三个函数来注册一组字符设备编号，这三个函数分别是 
register_chrdev_region()是提前知道设备的主次设备号,再去申请设备号。
alloc_chrdev_region() 是动态分配主次设备号。
register_chrdev()。是老版本的设备号注册方式，只分配主设备号。从设备号在mknod的时候指定。

 宏定义MKDEV的头文件“include/linux/kdev_t.h”
在kdev_t.h头文件中有一系列设备号处理的宏命令，用于处理各种设备号相关的数据。

include/linux/cdev.h
cdev类型是字符设备描述的结构
其中的设备号必须用“dev_t”类型来描述，高12位为主设备号，低20位为次设备号


使用命令“cat /proc/devices”查看已经被注册的主设备，设备号9没有被注册
insmod request_cdev_num.ko numdev_major=9 numdev_minor=0                                  
使用命令“cat /proc/devices”查看，设备号9被注册为scdev
rmmod request_cdev_num numdev_major=9 numdev_minor=0




request_cdev_num.c源代码：

#include <linux/init.h>
/*包含初始化宏定义的头文件,代码中的module_init和module_exit在此文件中*/
#include <linux/module.h>
/*包含初始化加载模块的头文件,代码中的MODULE_LICENSE在此头文件中*/

/*定义module_param module_param_array的头文件*/
#include <linux/moduleparam.h>
/*定义module_param module_param_array中perm的头文件*/
#include <linux/stat.h>

/*三个字符设备函数*/
#include <linux/fs.h>
/*MKDEV转换设备号数据类型的宏定义*/
#include <linux/kdev_t.h>
/*定义字符设备的结构体*/
#include <linux/cdev.h>

#define DEVICE_NAME "sscdev"
#define DEVICE_MINOR_NUM 2
#define DEV_MAJOR 0
#define DEV_MINOR 0

MODULE_LICENSE("Dual BSD/GPL");
/*声明是开源的，没有内核版本限制*/
MODULE_AUTHOR("lx");
/*声明作者*/

int numdev_major = DEV_MAJOR;
int numdev_minor = DEV_MINOR;

/*输入主设备号*/
module_param(numdev_major,int,S_IRUSR);
/*输入次设备号*/
module_param(numdev_minor,int,S_IRUSR);


static int scdev_init(void)
{
	int ret = 0;
	dev_t num_dev;
	
	
	printk(KERN_EMERG "numdev_major is %d!\n",numdev_major);
	printk(KERN_EMERG "numdev_minor is %d!\n",numdev_minor);
	
	if(numdev_major){
		num_dev = MKDEV(numdev_major,numdev_minor);
		ret = register_chrdev_region(num_dev,DEVICE_MINOR_NUM,DEVICE_NAME);
	}
	else{
		printk(KERN_EMERG "numdev_major %d is failed!\n",numdev_major);
	}
	
	if(ret<0){
		printk(KERN_EMERG "register_chrdev_region req %d is failed!\n",numdev_major);		
	}
	
	printk(KERN_EMERG "scdev_init!\n");
	/*打印信息，KERN_EMERG表示紧急信息*/
	return 0;
}

static void scdev_exit(void)
{
	printk(KERN_EMERG "scdev_exit!\n");
	unregister_chrdev_region(MKDEV(numdev_major,numdev_minor),DEVICE_MINOR_NUM);
}


module_init(scdev_init);
/*初始化函数*/
module_exit(scdev_exit);
/*卸载函数*/

Makefile文件：
#!/bin/bash
#通知编译器我们要编译模块的哪些源码
obj-m += request_cdev_num.o 

#源码目录变量，这里用户需要根据实际情况选择路径
#作者是将Linux的源码拷贝到目录/home/topeet/android4.0下并解压的
KDIR := /home/topeet/android4.0/iTop4412_Kernel_3.0

#当前目录变量
PWD ?= $(shell pwd)

#make命名默认寻找第一个目标
#make -C就是指调用执行的路径
#$(KDIR)Linux源码目录，作者这里指的是/home/topeet/android4.0/iTop4412_Kernel_3.0
#$(PWD)当前目录变量
#modules要执行的操作
all:
	make -C $(KDIR) M=$(PWD) modules
		
#make clean执行的操作是删除后缀为o的文件
clean:
	rm -rf *.mod.c *.o *.order *.ko *.mod.o *.symvers
